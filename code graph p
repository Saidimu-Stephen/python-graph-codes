{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 4 4 0 3\n"
     ]
    }
   ],
   "source": [
    "# Python implementation of the above approach\n",
    "\n",
    "# Function to find the parent of each node.\n",
    "def Restore_Tree(S, E):\n",
    "\n",
    "\t# Storing index of vertex with starting\n",
    "\t# time Equal to i\n",
    "\tIdentity = N*[0]\n",
    "\n",
    "\tfor i in range(N):\n",
    "\t\tIdentity[Start[i]] = i\n",
    "\n",
    "\t# Parent array\n",
    "\tparent = N*[-1]\n",
    "\tcurr_parent = Identity[0]\n",
    "\t\n",
    "\tfor j in range(1, N):\n",
    "\n",
    "\t\t# Find the vertex with starting time j\n",
    "\t\tchild = Identity[j]\n",
    "\n",
    "\t\t# If end time of this child is greater than\n",
    "\t\t# (start time + 1), then we traverse down and\n",
    "\t\t# store curr_parent as the parent of child\n",
    "\t\tif End[child] - j > 1:\n",
    "\t\t\tparent[child] = curr_parent\n",
    "\t\t\tcurr_parent = child\n",
    "\n",
    "\t\t# Find the parent of current vertex\n",
    "\t\t# over iterating on the finish time\n",
    "\t\telse:\t\n",
    "\t\t\tparent[child] = curr_parent\n",
    "\n",
    "\t\t\t# Backtracking takes zero time\n",
    "\t\t\twhile End[child]== End[parent[child]]:\n",
    "\t\t\t\tchild = parent[child]\n",
    "\t\t\t\tcurr_parent = parent[child]\n",
    "\t\t\t\tif curr_parent == Identity[0]:\n",
    "\t\t\t\t\tbreak\n",
    "\tfor i in range(N):\n",
    "\t\tparent[i]+= 1\n",
    "\n",
    "\t# Return the parent array\n",
    "\treturn parent\n",
    "\n",
    "# Driver Code\n",
    "if __name__==\"__main__\":\n",
    "\tN = 5\n",
    "\n",
    "\t# Start and End time of DFS\n",
    "\tStart = [2, 4, 1, 0, 3]\n",
    "\tEnd = [3, 5, 4, 5, 4]\n",
    "\tprint(*Restore_Tree(Start, End))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
