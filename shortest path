{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shortest path =  A B D\n"
     ]
    }
   ],
   "source": [
    "# Python implementation to find the\n",
    "# shortest path in the graph using\n",
    "# dictionaries\n",
    "\n",
    "# Function to find the shortest\n",
    "# path between two nodes of a graph\n",
    "def BFS_SP(graph, start, goal):\n",
    "\texplored = []\n",
    "\t\n",
    "\t# Queue for traversing the\n",
    "\t# graph in the BFS\n",
    "\tqueue = [[start]]\n",
    "\t\n",
    "\t# If the desired node is\n",
    "\t# reached\n",
    "\tif start == goal:\n",
    "\t\tprint(\"Same Node\")\n",
    "\t\treturn\n",
    "\t\n",
    "\t# Loop to traverse the graph\n",
    "\t# with the help of the queue\n",
    "\twhile queue:\n",
    "\t\tpath = queue.pop(0)\n",
    "\t\tnode = path[-1]\n",
    "\t\t\n",
    "\t\t# Condition to check if the\n",
    "\t\t# current node is not visited\n",
    "\t\tif node not in explored:\n",
    "\t\t\tneighbours = graph[node]\n",
    "\t\t\t\n",
    "\t\t\t# Loop to iterate over the\n",
    "\t\t\t# neighbours of the node\n",
    "\t\t\tfor neighbour in neighbours:\n",
    "\t\t\t\tnew_path = list(path)\n",
    "\t\t\t\tnew_path.append(neighbour)\n",
    "\t\t\t\tqueue.append(new_path)\n",
    "\t\t\t\t\n",
    "\t\t\t\t# Condition to check if the\n",
    "\t\t\t\t# neighbour node is the goal\n",
    "\t\t\t\tif neighbour == goal:\n",
    "\t\t\t\t\tprint(\"Shortest path = \", *new_path)\n",
    "\t\t\t\t\treturn\n",
    "\t\t\texplored.append(node)\n",
    "\n",
    "\t# Condition when the nodes\n",
    "\t# are not connected\n",
    "\tprint(\"So sorry, but a connecting\"\\\n",
    "\t\t\t\t\"path doesn't exist :(\")\n",
    "\treturn\n",
    "\n",
    "# Driver Code\n",
    "if __name__ == \"__main__\":\n",
    "\t\n",
    "\t# Graph using dictionaries\n",
    "\tgraph = {'A': ['B', 'E', 'C'],\n",
    "\t\t\t'B': ['A', 'D', 'E'],\n",
    "\t\t\t'C': ['A', 'F', 'G'],\n",
    "\t\t\t'D': ['B', 'E'],\n",
    "\t\t\t'E': ['A', 'B', 'D'],\n",
    "\t\t\t'F': ['C'],\n",
    "\t\t\t'G': ['C']}\n",
    "\t\n",
    "\t# Function Call\n",
    "\tBFS_SP(graph, 'A', 'D')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
