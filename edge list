{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 —> 1 0 —> 2 \n",
      "1 —> 2 \n",
      "2 —> 3 \n",
      "3 —> 2 \n",
      "4 —> 5 \n",
      "5 —> 4 \n"
     ]
    }
   ],
   "source": [
    "# Class representing a simple graph using an edge list\n",
    "class Graph:\n",
    "    # Basic constructor method\n",
    "    def __init__(self, edge_list, num_of_nodes):\n",
    "        # Convert edge list to adjacency list,\n",
    "        # represented with a multi-dimensional array\n",
    "        self.adjacency_list = [[] for _ in range(num_of_nodes)]\n",
    "\n",
    "        # Add edges to corresponding nodes of the graph\n",
    "        for (origin, dest) in edge_list:\n",
    "            self.adjacency_list[origin].append(dest)\n",
    "\n",
    "\n",
    "# Helper method to print adjacency list representation\n",
    "def print_graph(graph):\n",
    "    for origin in range(len(graph.adjacency_list)):\n",
    "        # print current vertex and all its neighboring vertices\n",
    "        for dest in graph.adjacency_list[origin]:\n",
    "            print(f\"{origin} —> {dest} \", end=\"\")\n",
    "        print()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Set up an edge list and number of nodes\n",
    "    edge_list = [(0, 1), (1, 2), (2, 3), (0, 2), (3, 2), (4, 5), (5, 4)]\n",
    "    num_of_nodes = 6\n",
    "\n",
    "    graph = Graph(edge_list, num_of_nodes)\n",
    "    print_graph(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
