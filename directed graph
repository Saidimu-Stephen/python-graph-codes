{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "G = nx.DiGraph()\n",
    "G.add_edges_from(\n",
    "    [('A', 'B'), ('A', 'C'), ('D', 'B'), ('E', 'C'), ('E', 'F'),\n",
    "     ('B', 'H'), ('B', 'G'), ('B', 'F'), ('C', 'G')])\n",
    "\n",
    "val_map = {'A': 1.0,\n",
    "           'D': 0.5714285714285714,\n",
    "           'H': 0.0}\n",
    "\n",
    "values = [val_map.get(node, 0.25) for node in G.nodes()]\n",
    "\n",
    "# Specify the edges you want here\n",
    "red_edges = [('A', 'C'), ('E', 'C')]\n",
    "edge_colours = ['black' if not edge in red_edges else 'red'\n",
    "                for edge in G.edges()]\n",
    "black_edges = [edge for edge in G.edges() if edge not in red_edges]\n",
    "\n",
    "# Need to create a layout when doing\n",
    "# separate calls to draw nodes and edges\n",
    "pos = nx.spring_layout(G)\n",
    "nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), \n",
    "                       node_color = values, node_size = 500)\n",
    "nx.draw_networkx_labels(G, pos)\n",
    "nx.draw_networkx_edges(G, pos, edgelist=red_edges, edge_color='r', arrows=True)\n",
    "nx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=False)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: \n",
      "Type: DiGraph\n",
      "Number of nodes: 8\n",
      "Number of edges: 9\n",
      "Average in degree:   1.1250\n",
      "Average out degree:   1.1250\n"
     ]
    }
   ],
   "source": [
    "print(nx.info(G))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\networkx\\drawing\\nx_pylab.py:585: MatplotlibDeprecationWarning: \n",
      "The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.\n",
      "  and cb.iterable(edge_color) \\\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAADnCAYAAAC9roUQAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3dd3RU1drH8e+ZPilACEV6DR0EQu8KRBFFBVSKFwQEpF2FiwIqiAUpIqAQASmvchWkWCjSkQ4iHTF0CL2Fmjb9vH9EcokkkDItyfNZi+Vaycw+T8D8srPPPs9WVFVVEUII4RUaXxcghBC5iYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kYSuEEJ4kc5XF3Y6nVw4fpkTe0/z145jnDoQjTXBitPhxGDSE/JYCDWaVSYsvBxhtcsQHBLkq1KFEMJtFG+3drxw4jI/f/Era7/dBIqCAiTGWVJ9rc6gxWAyYEu0UbJKcV555wWadqiP3qD3ZslCCOE2XgvdqJ3HmDl0HicPRON0OHHanRkewxxsQlEU2vV/mq7vd8AUYPRApUII4TkeD11ropWv3/kva+ZuxJpoc8uYRrOBoJAg3l84mGqNK7llTCGE8AaPhu6xPacY/eIEYm/GuS1w72c0G3i615O88Xl3dHqfLU8LIUS6eSx09647yAcvfoY1weqJ4ZMZzQaqNKrIJ8uHYzAZPHotIYTIKo+E7r4NfzLq+XFYE9w/u02NwWygYp1yjF83Um6yCSH8mtv36Z758ywfPD/ea4ELYEu0cXzPKcZ2/dJr1xRCiMxwa+g67A4+7DgRa6JnlxRSY0208ceq/WxevNPr1xZCiPRya+h+9/ESYi7ewleHulsTrEzqPYPb1+/4pgAhhHgEt4XumcPnWPz5co/fOHsUm8XGpN4zfFqDEEKkxW2h+9+PFmO32t01XKY5bA72rj3IpVNXfF2KEEI8wC2heyfmLr8v34vq8tG6wj+4nCo/f7nS12UIIcQD3BK6q+b8hkajuGMot3DYHaz+v40+uaEnhBAP45bQ/XXmWo88cZYViqLwx8r9vi5DCCFSyHLoJsZbuH7xpjtqcStLvIWo34/7ugwhhEghy6F7+uBZjGb/e/xWdakc2hLl6zKEECKFLIfu8T2ncNgc7qjF7c7+dR4vtwsWQoiHynLonjt6EZvF91vFUuN0uIi7He/rMoQQIlnW13TjEt1Rh0dotRq//YEghMidshy6fv3buwKqy+XrKoQQIlmWQ9cc6L9H5ricLgx+eJNPCJF7ZTl0HytTCJ1B645a3E+FwLwBvq5CCCGSZTl0K9Qpj9Hsn7PdYhWKoNX66Q8EIUSulOXQDatdxuedxdIih1YKIfxNlkM3OCSI4PxB7qjFrcxBJqo0rOjrMoQQIgW39F54smtTv1vXdTic1H+2tq/LEEKIFNxyMOWV6Gv0qvKW3+yJ1WgUakRU4ULeY+TLl4+YmBhu3LiBRqNh1apV6PVyeKUQwjd07hjksdKFqFQ/jEOb/aPXgcFsoPYLVfj8jY9SPAZcpkwZdDq3fMlCCJEpbjs5otsHL2MM8P0uBkWjUKJiMTr3eZlly5ZhMpmSPxcSEsLWrVulH4MQwmfcFrqPt6hK4xfqYjD59ld3g1HPu/PfBODZZ59l7NixmM1mAgIC6NKlC3369KFGjRrMnDmT+HjpyyCE8C63rOneE38nnm7lB3H3Rqy7hswQU6CRf416iZfffj7FxwcPHkxAQABjxoxBVVV+++03pk2bxpYtW+jWrRv9+/cnLCzMJzULIXIXt4YuwJ61BxndfgLWBO+eJKEz6ChdrQTzoiIJzhPMk08+SePGjalVqxb169dP9SGJs2fPMmPGDObMmUN4eDgDBgygTZs28kCFEMJj3B66ACu+XseMId94LXi1Oi0FS4QSuXscvfr2ZMmSJQCYTCYsFgurVq3i6aefTvP9FouFRYsWMXXqVG7cuEH//v3p2bMn+fPn90r9QojcwyOhC/DLtFXMHvadx89O0xl0FCoRypRtnxBSOB8XL16kfPnyWCwWFEWhWbNmbNy4EUVJ38GZf/zxB9OmTWP58uV06NCBAQMGUKtWLY9+DUKI3MNtN9L+6YWBbfjP3P6YAo1odZ65jCnQSKV65Zn2xzhCCucDoFixYnTu3BmNRkNwcDB//fUXK1asSPeY9erVY968eRw7doyyZcvSrl07GjduzIIFC7DZ/OvwTSFE9uOxme49187HMLbrF5zcfwZLvHt6NGh1GvRGPf0mv0abXi0fmMWePXuWOnXqsG7dOhITE+nUqROdO3fmk08+yfA+XYfDwfLly5k2bRpRUVH06dOHvn37UrRoUbd8LUKI3MXjoQugqiqr5/7G7OHfYbc5SIy1ZGocvUEHGoXHm1Vh8Kw3KFSiwEOveS+MY2JiePXVV0lMTOSHH36gSJEimbp+VFQUkZGRLFiwgNatWzNgwACaNm2a7qULIYTwSuje43Q42fXrPhZO+IWT+8+g0+tIjLM89GEFg0mPzpA0O322bwTPD3iKQiULZvjaLpeLMWPGMH36dL7//nueeOKJTH8dd+7cYd68eURGRmIwGBg4cCBdu3YlMDAw02MKIXIHr4bu/a6dj+HI7yc4uus4h7Ye4dLJK9itDlxOFzqDjqB8AVSsW44azaoSFl6WCnXKYTBm/cGLdevW0a1bN/79738zbNgwNJrMrzerqsqGDRuYNm0aW7dupXv37vTv35/y5cun670WiwWz2Zzp6wshsh+fha4vXbhwgVdeeYWQkBDmzZvnlq1h0dHRzJgxg7lz5xIeHs7AgQN5+umn09zz++233zJkyBA+++wzevbsmeXrCyGyB4/tXvBnxYsXZ9OmTVSqVInw8HB2796d5TFLly7NuHHjOHfuHJ06deKDDz5g7ty5uO47GPPez7cvvviCffv2Ub16dUJDQ1N8TgiRs+XKme79fvrpJ9544w1Gjx5Nv3793HZTTFVV4uPjCQpK2eD9q6++4tChQ3Ts2JG5c+fy3nvvUbVqVbdcUwjh/3LlTPd+7du3Z8eOHXz99dd06dKFuLg4t4yrKMoDgbtlyxYOHDjAjBkzCAoK4u7du5QrV84t1xNCZA+5PnQBypcvz86dOwkMDKRu3bpERbm/L7DFYmHKlCns3buXJUuWsGnTJgoVKoTJZEqxBCGEyNm0o0ePHu3rIvyBXq+nXbt2BAUF0aVLF4oVK0aNGjXcNr5Op6Nq1aoEBgaydOlSFi1axNmzZyldujRVqlQBUu4tFkLkTLl+TTc199ZcW7ZsyeTJk1M0QneXXr160apVKzp06IDBYADAZrPx7bff0qVLF9nzK0QOJcsLqahRowZ79uwhJiaGxo0bc+bMGbeMq6oqLpeL06dPY7FYaNCgAQaDIXnngtVqZcWKFZQsWZIhQ4Zw8uRJt1xXCOE/ZKb7EKqqMnXqVMaMGcPs2bN57rnnvHLd6Ohopk+fzty5c6lbt27ynt+sPMjhDYnxFk4diOby6avYLXZUVcVgMhBaLD9htcsQHBL06EGEyOEkdNNh586dWWqak1mJiYksXLiQqVOncvv2bfr370+PHj38ps+vqqoc2HiYX2etJ2rHMW5evo0xwIDqUnG5VEBFo9Gg0WqwJlgJCgmiQnhZnu75JA3b1UGnl0NCRe4joZtO95rmaLVaVqxY4dUbXqqqsmvXLiIjI1mxYgUdO3ZkwIAB1KxZ02s13C/+bgJr/m8jiycuI/5OAolxGWtgZA42odVqaTfgKdr1f5rQIiEeqlQI/yOhmwEul4tVq1bRokWLB250XblyhXbt2vHkk0/SvXt3Kleu7JEarl69yuzZs5k+fTplypRh4MCBvPjii8k34zzt9xV7mdB9KjarA2tC1lp1Gkx6NFoNvSf8i+feiJCdGyJXkNB1o4MHD7J06VJWr17NRx99RKtWrTx2LYfDwdKlS5k2bRrHjh2jT58+9OnTx2N9fmNvxTHlja/Z9eu+LIftP5kCjZSpXpL3FgymcKmMd5ATIjuR0PWAgQMHUq5cOQYPHuyV6x0+fJivvvqKBQsW8NRTTzFw4EAaN27stpnj5dNXebPJ+8TdisNudbhlzH/SaDUYzQbGrn6fqo0qeuQaQvgD/74dno1ER0fzxBNPMHnyZH7//fd0tXd0l2rVqvHVV18RHR1No0aN6NWrFzVr1mTWrFnEx8dnaewLxy8xoO5wbl+747HABXA5XSTGWRgW8TEHN/3lsesI4Wsy03UDl8uFoijMmzePWbNmMXToUF544QWf1rN+/XoiIyPZvn17cp/fjPZ5uH7hBv3C3+FuTKxXu6CZAo1M3PghFetIXwqR88hMN4ssFgsajQZFUejevTvVqlXDbrf7tCaNRkNERARLly5l9+7d6HQ6GjRoQNu2bVm1alW6ej24XC5Gt59A7M04r7edtMRbGfncOBLjEr16XSG8QUI3C1wuF8uXL2fr1q0AJCQkEBQUREJCgo8r+58yZcowfvx4zp07R8eOHXn//fepUKECkyZN4tatW2m+b2nkas4duYjL6ZtmPPF34vlq8Dc+ubYQniShmwWKohAXF8dbb71Fs2bN6NGjBzdv3qR169ZA0g4Df2E2m+nRowd79uzhu+++Y9++fZQtW5Y+ffpw8ODBFK+9fPoqc0Z877bTmzPDZrGzcf42Dmw87LMahPAEWdN1k+3bt3Pt2jUiIiKS9/AePnyYyMhIjzXNyaqrV68ya9YsZsyYkbznt3379nz80iR2/brPZ7Pc+xUt/xjfHPtS9vCKHENC14MSExPp1q0bp0+fZsmSJZQpU8bXJaXKbrezbNkypk2bxsmo01S+WR/V6R//W5gCjYxfN4oqDSr4uhQh3EKWFzzIbDazaNEiunXrRoMGDVi+fLmvS0qVXq+nQ4cObNy4kbdefgfwj8AFsCbaWDxxma/LEMJtZKbrJb5qmpMRqqryUuFe3ImJ9XUpKeiNen64OJM8+YN9XYoQWSYzXS9p2LAhe/fu5cCBA7Rs2ZLLly/7uqQHXD17HYubH/F1B71Jz9Fd0ltY5AwSul5UoEABVq5cSatWrQgPD2fjxo2+LimFE3tPo9VpfV3GA6zxVo7tkdAVOYOErpdpNBpGjhyZfCzP2LFj/eZgyiO7jme4TaM3OB1ODm12/2GhQviChK6PtG7dmt27d7NixQqee+45bt686euSOPL7CVSXfy7xRx8+5+sShHALCV0fKl68OJs2baJy5crUrl2b3bt3+7Se+Dv+8yTdP1kTbL4uQQi3kND1Mb1ez8SJE5k0aRJt27blq6++8nqvg3scNv95gu6fnA6nr0sQwi0kdP1E+/bt2bFjB19//TVdunQhLi7O6zXojXqvXzO9tHr/u8EnRGb432bRXKx8+fLs3LmTQYMGUbduXZYsWULVqlXdeg27zU704fOcP3oRS7wVp8OJ3mQgX8E8mAKNbr2WO5kD/e8xaiEyQ0LXz5jNZmbPns0333xDixYtmDx5Mq+++mqWxjx54AzLp6/l4MbDXDl7HaPZgKqquJwqqqqi0ShodVoS4/1v58I9ZWuW9nUJQriFhK6feu211wgPD6djx45s27aNKVOmZKhpjt1mZ8vi3/lh/C9cPn0Vu9We3MAmwZ69+tTq9Foeb17F12UI4RaypuvHqlevzu7du7lx4waNGzfmzJkz6XrfiX2n6VXlLab0+5row+ewJlj9omNYZhnMBiqEyykSImeQ0PVzefLkYdGiRXTv3p0GDRqwbFnazV/sNjuzR3zPW01Hcvn0NSx++KBDZjhsTirW896Zc0J4kiwvZAOKovDvf/+bunXr8sorr7B9+3bGjBmTomlO/J143m75IeeOXsSWmHP2tGq0Gpq/1JDAPAG+LkUIt5CZbjbSsGFD9u3bx8GDB1M0zYm7Hc/ABu8S/df5HPcQgd6go8OQZ31dhhBuIzPdbOZe05wxY8YQHh7ON3O+4cd313L1zDXsfvxwQ2YVCytCucdLu228e1vmTu4/w53rd7FZ7Gh1WowBBkpUKkaF8LKEFM7ntusJ8U/STzcbW7duHcNe+JCC9qK4HDnvn9FgNjB5y0cpbqLZ7Xb0+ow9xBFz6SYrpq9h06IdXIm+jtFkwOV0Ybu3o0NJ2iFhMBmwW+0YA4xUblCBF//9DOGta6DRyC+Ewn1kppuNFTIUpYhaEpvDt0e+e4IxwMjzA556YNfCpk2b6NevH82aNaN79+40b948zTH+3HqEBWN/5sCmw6CC3Zr09/TAljk16Wadw5b0cbvVwe5V+zm89QimIBMdhzxL2z6tZV1ZuIXMdLOpxHgLr4UN4uaV274uxe0URaFw6YLMiZqCIZVHky9cuMCaNWtYtGgR48ePp2bNmik+H3c7ni/6fc3O5XuxJVrJ6v/hRrMBY6CREd+9SZ2Ix7M2mMj15PembGrptNV+3RUsKwLymBm76r1UA9flclG8eHF69eqFxWIhOjo6xed3rdxHt/ID2f7LbqwJWQ9cSDqn7W5MLKPbT2Bct6nE382Zf+/COyR0syGn08mPk1dgzUFbwwAUJSlwJ/42muIViqb6ms2bN1O2bFn69OmDyWSievXqyZ9bMO5nPn75c2JvxiUvJbiTNcHG1iU7eaPW29y4fMvt44vcQUI3G9qz5iDWRP87yywr9LgIDjLyxfYxlK+V+lH1LpeLJ554gjlz5nDhwgU++eQTypVLWvP99oOFfP/Jjx7fMmez2Ll+/gb96wwj5pLvG8+L7EdCNxta8vlyEmNzxtNmkHTTrF7zCvyf/jdKlwpJ9TUWiyV5F8ETTzxBoUKFuHHjBgA/ffkriz9fhtVLh2o6HU7uXL/L4KYjibsd75VripxDQjebUVWVI78f93UZbmEKNBKYL4B3v3+T0RvHkufD9yCVo+mdTicLFy7k119/BeD8+fMYjUYSEhI4dTCaOSPme/2hEKfDyY2LN5ncZ6ZXryuyPwndbOby6atJi5/ZlKIomAKNPFamEH0+68aCczNo9HzdpE/2709qd740Gg06nY4JEyZQs2ZN+vXrR4ECBXiixRN8/PLn2Cy+Wdu22xzsWrmXncv3+OT6InuSLWPZzKaF25nUZyaJsf7ZntEYYER375QHVQVFweV04bA7KBZWhGpNKtHq1eZUaVgBJbUfHn+/Jy1nz57l0qVLNGzYkP8buYAfJ//qtWWFtASFBPLtiankyR/s0zpE9iAPR2Qzpw5Gkxjnn4Gr1Wv5cvsn3L5+F2uiDVVVMZoNFCiWn+IVi6LVpuPIHUUBlwvSeAqsVKlSlCpVirs3Y1ny+XJsFt8/GGJNsLHk8+X0HNPF16WIbEBCN5uJvRkPfvq7iU6vJU+BYMpmtVeCRgNOJ1gsEBiY6ktWz92Y+kzZB+xWO8unr6Xb6JfR6eVbSjycrOlmM75av0wPRVHc13RHq4Wff4ajRx9Y53W5XPw4ablf7VN2Op3sWLrb12WIbEBCN5sxmg2+LiFNqkt174nCL70E3btDZGSKDx/aHOV357klxlpY8vlyX5chsgH5XSibyVswD4pGQXX53xqDw+EkMI/ZfQMajbB4MdSrBzVqQLNmABzaEuWXjdpPHjiD0+lM39q1yLVkppvNlK9VBnOQfx5Hnic0GHOQG0MXoGRJ+PZb6NwZ/m7afmhzFE6H/535ptXruHD8sq/LEH5OQjebqRBeFofd6esyUlUhvKxnBn7qKejTBzp1AoeDUwejPXOdLFKAE3tP+7oM4eckdLOZgiUKoNX63z+bzqCjhiePSR85Esxm4oeOINFPD9xMjLNw+tBZX5ch/Jz/ffeKh1IUhRotqvrdQ2lanZbaLWt47gIaDXz3HYlLfkbnZ1/7/aQXg3gUCd1s6KX/PIcx0L/WdQuXKphmdzC3KVAAZ+R0FJv/3US7xxMtJUXOIqGbDdVoVoU8+YN8XUYyc5CJTsNe8Mq19PXr4MrgGWneZAow+roE4eckdLMhRVF4+e12/vMNrkCzlxp45VKBeQNw+t9uOQA0Wg35Cuf1dRnCz0noZlPP9G5F/qIhPl/bNQUaGfhlL4xm7/wAMJqNhDzmn0ekmwKNhNX20A4OkWNI6GZTeoOekYuGoDf57gk1rU5Lxbrlad0t7RN5PaFinfJevV562W0Oz22bEzmGhG42Vr5mGTq81RZjgG+C12DS83vsBkwmE/Xq1WPQoEHMnTv3gcMi3a1G8yoYTP63rqs36Aktmt/XZQg/J/10szmH3cG7z3zKXzuOefXRWKPZwOif3+G25joRERHc+99Ip9PRo0cPvv76a49d+9zRi/QPf8evGt4oGoWmHRowcuEQX5ci/JzMdLM5nV7HJ8uHE1arDAYvNcMxmg0MmzeIOhGP06pVK5o2bZr8OZPJxLhx4zx6/ZKVilGqagmPXiOjjGYDL/3nOV+XIbIBCd0cwGAyMGHDBzzevAqmQM/d0NJoFIwBRkYtGUrTDv/brTBp0iTMZjMmk4nixYvTrVs3rl+/7rE6AF5553nMwf6zV7lAsfxUrOufa83Cv0jo5hAGo54xv75L7wn/whRoROPmR4VNgUbK1izNzAOfUa9NrRSfCw8Pp23btrz33nscPHiQqlWrUqtWLX777Te31nC/Rs/XRW/wj3VdU6CRTsNf9Jum6sK/yZpuDnQl+hqfdpnCmcPnscZbUjvrMd0MJj2KotBjTGde/PczycegP8ratWt57bXX6NGjB6NHj0bvgQcadizbzaddvvDpGWmKRqFsjVJE7h4nLR1Fukjo5lCqqnJocxSLJi5l/4bDKAoZOk/MHGxCb9TT/s1neKZ3a0IKZXzT/9WrV+nevTt37txhwYIFlC5dOsNjPMqHHSeya8Ve951YkUHGAAMz9k+keFgRn1xfZD8SurlAzKWbrJu3ib3rDnH6QDSWBNv/tlz9ffqu6lKxWmwULlWQKg0r0LRDA+q3rZ3l2ZvL5WLy5MmMHz+eyMhIXnrpJTd8Rf9z92Ys3cMGEXfL+41mjAFGuo9+mZeGtvP6tUX2JaGbC926eptzRy5iTbThsDswmg3kLZCHUlWLe2yddM+ePXTu3JkWLVowZcoUAtM4cDIzjv5xgrdbfogl3nvLDMYAAw2fq8OI799M95KLECChK7woNjaW/v37s2fPHhYuXEiNGu5rBXlw81+8/+xYrwSvMcBA2fCS7Hdu46OPP6JZs2aynivSTX5EC68JDg7mv//9L++++y4tW7YkMjISd/3Mf7x5VT7b8AGBeQM8egy6McBI85ca0X9Gd7Zt30ZERAT58+enZ8+e7Nq1y2PXFTmHzHSFT5w4cYJOnTpRokQJ5syZQ2hoqFvGvXXtDhN7RnJwU5RbdzXoDDqMZgNv/98AGr9QD4CqVasSFRUFgEajoUaNGuzfv99t1xQ5k8x0hU+EhYWxc+dOypUrR82aNdm8ebNbxg0plJcxK95l0Fc9QafiJGu7GlRUDGYD9drUYt7JacmBC9C7d29MJhOKohAYGMjKlSuzWr7IBWSmK3xu1apV9OzZkz59+jBy5Eh0OvcsD1gSrIzuN4Zt3+0h2JAHl0PF5UzfKcKmQCOqS+WO+Tq9P+5Ot35dH3jNhQsXKFWqFEWLFqVAgQI0a9aMKVOmyEMS4qEkdIVfuHz5Mt26dcNisfD9999TsmRJt419/fp11i7ZgPWCiz+3HOH0n2dx2BzoDDoURUFVVVRVxWaxU7hkQSo3rEDNJ6rR/KUGLPl5Cd9++y3r169PdezIyEg6dOiAyWQiIiKChg0bSvCKh5LQFX7D5XLx2Wef8fnnnzNjxgzat2/v/ovYbKinTnEjb2HuxsRiTbSh02sxBhh5rEwhDEb9P15uo3Tp0qxZs4bq1as/dOjbt28TERFBo0aNmDx5sgSvSJWErvA7u3btonPnzjz11FNERkY+sA/W4XBkfgnC5YIaNeCLL6Bly3S9ZcyYMZw+fZo5c+Y88rUSvOJR5Eaa8Dv169dn//79BAYGYrU+uANh06ZN1K9fn759+7Jnz56MDa7RwJdfwr/+BRcvpustffv25aeffiImJuaRr82XLx9r165lx44dDB482G1b4kTOITNd4bdUVcXlcqV48MDpdHLp0iWuXr3K9u3bWblyJRMnTnzkr/4P+PRTWLkSNm6EdDTjGTt2LIMHD8ZkSl87SZnxirRI6IpsrXXr1vTo0YMuXbpk7I0uFzz/PISFwaRJ6Xi5K8OP+96+fZvWrVvTuHFjCV4vcblcXDp5heN7TxNz4QbWRBuKomA0G3isTCHCwstSuFRBn/5beO7RHSE8wOl0Js98L168iNFozNxOB40G5s2D8HBo1Ag6dnzEy1MPXLvdzu3btylYsOADn8uXLx/r1q2jdevWDBkyhEmTJknwekBCbCIbvtvCqjkbOBt1AY1Wg0ajwZpow+lwgpJ0iKrRbMBpdya143y8FM+98RTNOjbA4OXDXWWmK7KN+wN34cKFLF68mPz582ftPLa9e6FNG9i2DSpUyNBbExMT2bBhA2PHjmXevHmUK1cu1dfdm/E2adJEgteNLhy/xMLPlrJx/jYUjZLhvhvmoKSlomd6t6TD4OcoWNw9T0U+ioSuyFaOHTvGsGHDsNvt9O/fn5YtW6Z7nTVNX38NU6fC779DBrufWSwWZs+ezaxZs9i6dSt58uRJ9XUSvO7jdDiZ/+lPLBz/Cw67A6cjfQ+8pEVn0KLT6+g94V8890aEx/9tJHRFtuB0Onn//fdZtGgRw4cPp3fv3u4bXFXhtdeS/vvtt5CObzqbzYZOp0tedujZsycvvPAC7dql3VtXgjfrzhw+x8cvT+LauRi3nxhiCjRSpnpJ3lswmMKlHlwuchfZMiayBUVRKF68OKGhoSxYsICPPvqICxcuJH/e4XDgcGSyz4KiwPTpcOAApPNcN4PBkBy4a9asYceOHRQp8vDTI+5tJ9u2bRtDhgyR7WQZtHvNAQY1eJcLxy555IgmS7yVY7tP0efx/3Bszym3j3+PzHRFtnP48GG++eYbatWqRZcuXVAUBYvFwquvvsrHH39M5cqVMzfwiROwZAkMH57qbPenn35i2uSgghAAABTYSURBVLRp1KpVi1OnThEbG0uhQoWIiopi0KBB9OrVK12z11u3bhEREUHTpk35/PPPZcabDr+v2Msnr0zCmmjzyvVMgUYmrP+AyvXD3D62hK7IEVRVZfbs2YwYMYJx48alOwAfcOxY0jayVHYrbNmyhdatWzN8+HC6dOnCyZMnKVy4MMWLF+exxx7L0GUkeNPvz61HGNHmE6wJ3gncewKCzXyxYwylq5Zw67gSuiJHiYqKolOnTlSuXJmZM2eSL1++jA9is4Eh9W1Eq1at4qOPPmLZsmWpbhPLiFu3btG6dWuaNWsmwZuG+Dvx/KvcQGJvxvnk+kXKFWbOX5PdeoyVrOmKHKVKlSrs2rWLggULUqtWLXbu3JnxQbRasFhS/VSbNm14+eWXGTFiBE6nM0u1hoSEsG7dOrZs2cJ//vMfWeNNxRf9Z3n17Lt/unn5FvNGL3brmDLTFTnWL7/8Qt++fXnzzTcZNmxYxs4xi41NWmJIYwtZdHQ0pUqVcsvsVGa8qdu9ej8fdpzo9WWFfzKYDXyx7RPK1yrjlvEkdEWOdv78eV599VV0Oh3//e9/KVq0aPrffPUqBAdDQECaL0lMTMRkMvHnn39SuXJl9Ono45Cae8HbvHlzJk6cmOuDV1VVupUfyJUz13xdCgDVmlRi8paP3TKWLC+IHK1EiRL89ttvNG/enNq1a/Prr7+m/82FC8O1a2kuNaiqyscff0ypUqV4/PHH2bt3b6brvLfUsHnzZoYOHZrrlxr+2nGM29fv+rqMZMf3nOLy6atuGUtCV+R4Wq2WUaNGsXjxYvr3789bb72VasvIVJUsCVeugN2e4sNOp5Pu3bszadIkzp8/T3BwMGazOUt13r/Ge+vWrSyNld0tnrgMqw/Xcv/J5VT5Zdoqt4wloStyjaZNm7J//37OnTtHgwYNOHbs2KPfpNFA3rzwxx9JT6ypKty6xd27d9m/f3/yMoDT6SQoKCjLNYaEhLBx48ZUH22OjY2lW7duLFy4MMvX8Wd3b8aye/UBv5rtO+wOVs3ekNRAJ4uky5jIVfLnz8+PP/7IzJkzadKkCZ999hndu3d/+BpqSEjSum7evEkhnJhISHQ0u3fvpmvXrixbtgyLxUJwcHDyW1RV5crVOxw/eZWbt+Kx2R1oNBqMBh0liucnrFxhggKNqV4urfC+fv069evXp2vXrjidzoy3s8wmjv1xEr1Rh91qf/SLvezc0YuUqZa18/skdEWuoygKb7zxBk2aNOGVV15h7dq1zJgxI81mNTidEBkJVmvSHt7gYNi3D1PbtixZsoS3336bzz//HI3WyI/L9rL2t7+IPnsDFRWtVoPD4cLldKEoChqtgk6rwWp1kCePmWpVitH+udrUrF7ikTfPypYtS+vWralWrRpt2rQBksI9p910O7bnlNeePMuoE3tPS+gKkVnVqlVj9+7dDBkyhFq1arFgwQLq1av34Atv3oQVK0CnSwrduDjYvRvatkVRFAYMGo4pb30695qDRqNgsTxkhuaAeyuVN2/Fs3XHcXbvPUNwkIlXOtTjmYjqBJjT7u86btw4nn76aUJCQjLVWD07OLQ5Cqc967/Gu1tinIWonceI6N4iS+PkvH8xITIgICCAGTNmMGHCBJ599lkmTJiAy/WPVoEFC8L58zBtGhQpkrSu+8MP2OwOImf9Rt8357FjVzQ2m+PhgZsKVYVEi51rMbF8/c1mOvecyZ790am+9sCBA+zevZuhQ4cC5LgZ7j1noy48+kU+cnzP6SyPIft0hfjb2bNn6dq1KwEBAcybNy/1fgpOJ0ydypFNe/kgX2Nu30nAas1kd7M0GI06WjSpyJv9WhEY8L913969e5M3b14mTpyYY2e5AC/mf4242/G+LiNVJSoWZe6RL7I0Rs78VxMiE0qVKsWmTZto0KABtWvXZvXq1Q++SKtl/eMRvEktrl676/bABbBaHWzcepSeA77h/IVrTJ06lV27dnHo0CFGjRrl9uv5G6cza03JPcnhhmUPCV0h7qPT6fjoo4+YP38+vXv3ZujQodhs/7ups2LNQSZ8uRqrzf1hez+bzcn1mFgGvbOQXX8cpEWLFly/fj35Zl9OneUC6PQZeFzby/TGrDe+ybn/ckJkQYsWLdi/fz/Hjx+nUaNGnDhxgk3bjvLl9A0emd2mxul0cfeuBZumDnv2HqJBgwaMHDmSu3fv/v15p1/tZXUXc3AWj1/yoOD8Wd+LLbsXhEhDgQIFWLp0KZGRkTRv8TSVa7+Bw+ndkHO6VG7ciuO/iw4xf/58LBZL8oMTdrudqVOnMnToUI/dVIuNjeX27dsUKlQIozH1fcWZdf36dY4cOZLiz9GjR8l/sTgFyECPDC/RaBSqNamU5XEkdIV4CEVRGDBgAHsOGzgdfQNF4/1ffR0OF/sPnmXTtmO0aFIx+eMajYYFCxZw7do1JkyY4Pbg3bBhA/369ePUqVOsXLmSp556KsM38FwuF+fPn38gXI8cOYLD4aBy5crJf1q1akXlypU5uOIoc0bMx2bxr726piATleqVz/I4ErpCPMKyVQe5fC3eJ4F7j8XqYMKUVdSsXoJ8eZO6nhkMBtavX0+rVq1455133B68VapUYePGjYwaNSrFeXSpsdlsnDx5kqNHj6YI1mPHjpE3b97kYK1ZsyadO3emUqVKPPbYY6nWa6nrQGfQYku9z5DPOGwOKoSXzfI4ErpCPITV5mDGnE0Z3n/rCTabg2/n7+DNfq2SP5Y/f/7k4B02bBjjx493W/DeO2gzICCA69evA6RYQ3Y6ncyfP58xY8YQHR1NiRIlUsxaBw0aRKVKlcibN2+GrhsWXhZ/XKrOWzAPBUsUyPI4ErpCPMTmbcfwl+9/u8PFqnV/8kbP5hjvu4vuyeAFCA0NTQ7d+2m1Who0aMDixYsJCwtLtUlPZhiMep55/UmWRq7B4eFdIullCjDy0tB2bvl7ld0LQjzE/MW7SPSzPgC/bTn6wMfuBe/69esZNmxYunY1uFwuoqOjWbVqFZMmTeLKlSupvi40NJSYmBiAB8YNCwujevXqbgvce54f2AaNxn+euHO5XER0a+6WsSR0hUjDqTPXuXTltq/LSCHRYueHn3an+Nj27dupXr068fHxqQavzWbjr7/+YsmSJXzyySd07dqV2rVrExwcTJMmTZg0aRLR0dFpBnWRIkWIj096Qkyn884vx0XKFKZKwwp+Ebw6g44WrzQmMG/qRzdleDy3jCJEDnTorwv4zdrCfc5fuInVakerVRg1ahRTpkzB5XKxbds2ypcvz+uvv86HH37Izz//jEaj4ezZs5QsWTJ5vTUiIoI333yTSpUqpd1Z7W9Op5PExESOHDnC/v37CQkJoXTp0l75Ot+a2Ze+Nd/GmuDbZuZGs4E+n/3LbeNJ7wUh0vDhuGWp/irvawEBBvr3CKdf385cvXoVhyNp3VOn01GtWjUqV65MqVKl+OGHH3jyySeJjIzM1K//LpeLdu3aERUVRUBAAMWKFePdd9+leXP3/JqdHj9OXsE3o37w2YnApgAj78wbRNP29d02poSuEGl4pcdMrly94+syHmA06KheSceMqSOw2+2oqorD4eCFF17g559/Tn7djRs3aNWqFREREYwbNy5bdiVzuVwMrD+C0wejcTq825NBb9RT56nH+eiXYW4dV9Z0hUiFy6Vy9Zr/HIx4P6vNQYFC5YmLi+PAgQOMHDmSChUqkJCQkOJ1oaGhrF+/nrVr1zJ8+PBs+ciwRqPh42XDyVswr1fXd3UGHUXKFmLYvEFuH1tmukKkwmq183SHKbhc/vnt0aRBecaMap+u1+aEGe/lM1d5s9F73L0R6/EZr96go2DJAny5Ywx5Czx8zTszZKYrRCrsDpdf3DlPiy0DLQbvzXjXrFnDiBEjsuWMt0iZwny1ZzyFShbEGJD2yRpZZQo0UrpaCSL/GOeRwAUJXSFSpddr/XaWC2DKYIvB0NBQNmzYwOrVq7Nt8BYoFsrsw5No27s1xoccaZQZiqJgNBvo/G57pv4+lqB87tkelhrZMiZEKgx6LRpFweWPe8Yguf9CRtwL3pYtWwIwduzYbLfUYDAZ6Df5NVp0aswnr0wi9lYcibGZb9KgKGAKNFG4dEHeXziEUpWLu7Ha1EnoCpEKRVEoVjSEs+dv+LqUB5hNeipXLJKp9+aE4AWoXD+Meaem8cfK/SyasJTje0/hcqnpfmzYYNKjqlDziWq8/HY7Hm9R1Wt/DxK6QqShWpVifhm6KAoVw1I5vy2d7g9eRVH49NNPs2XwarVaGj5Xh4bP1eHSqStsXrSDg5ujOLn/DPF3EjCY9ElTWVUFFawWG3kL5KFCnbLUbFGN5i83pECxUK/XLbsXhEjDyrV/8uWM9ST6QYex++l0Gtb8PASdNmu3ZGJiYmjVqhVt2rTJtsGblrs3Y4m5cBNrog2NRsFg0lOoVEEC82R8WcbdZKYrRBpqP17SLw9JrFyxSJYDF5JOxrjXnQzIcPCqqgucZ8H+F6ptPzgOgSsBcIBiACUfGMJR9DVAXxVFWzjLNadXnvzB5Mkf7LXrZYSErhBpeKxwXqpUKsqBP8/7upRkZh10aVfLbeNlJnhV5yXUhO8h4QfACaoCJJBqowr7HlTFDKodVVMAAnuhmF9A0WT9rLHsSraMCfEQnTvWx2zO+gmw7mJw2Kjf8UkYNQouX37oa0+dOsXMmTP5/fffsdvTXiK5F7wrV67k3XffTXM7mWo/jutmd9TrT0H8t6DGgpoAxJN2ZyAnqHGAFVwXIfYz1GuNcN15F9V1K11fc04joSvEQ9QLL0OAm/eEZpbRoOOl7i3RbtkMMTFQpQp06wb79j3wWpfLxblz59i6dSvDhg0jIiKCfam87p4CBQqwYcMGVq5cyXvvvZcieFXVgSt2KuqNjmD7HbACme0xnAhYIHEZ6vVWqJZ1mRwn+5IbaUI8wh97z/D+Jz977ej1tBQqGMx3s3pjNPy9KnjrFsyaBatXw4oVEJDyJpHVak0+wXf48OG4XC4mTJjw0GvExMTQsmVL2rZty5gxY8AZjXqrHzgvAR44tEwxg6ExSt4JuWbJQWa6QjxCvfAyNG1UAYPedwdTGg06Ro94/n+BCxASAu+8A2vXgv7BJRCj0YjFkhSUDoeD0NBQXK6H3xi8N+P99ddfmTalP+qNDuA8g0cCF0BNBOsW1Bsv55rlBpnpCpEOcfFWuvT6mjt3E71+baNBx7NtHufffVtm6H33jkvfv38/L774IsuXL6d69erpeu+t6zvRxXYn0Gs7rPSgLYYSugRF45meB/5CZrpCpENQoJHPPn4Jk8m7N9UMBh0Vwx6jX88WGX6vy+VixowZvP7660yfPv3BwHWkvlyiOq+Q1zXon6sVHmYH5yXUm91RVf84jNJTJHSFSKeKYY8x4cOOGW42k1lGg44ypQow4eOO6DO4tHHixAlGjx7NgQMH+O6772jTpk3KXQmqCtWrw4cfpnifqqqot/8DagLef1TCBs7TqPGzvH5lb5LQFSIDHq9eginjOhEYaESn89y3j8mkp1qVYkyd0BmzKWO7J+Li4ujUqRMzZ86kefPmhIWFAfxv/63FAvPnw9mzMH48/PRT8nvVxB/Bfhjw0WxTTYS46aiOk765vhfImq4QmXDzVjxjJ63k0OELWKzue0xYq1HQ63W80as5L7StlalHc10uFxs3bmTv3r3s2rWLqKgohgwZwuuvv540ntMJ7dvDsmVJbzCZYOdO1OrFUGNa/7331pcU0JVHCV2Rox5NvkdCV4hMUlWV37YcZeLUNbhcKpYs9GhQlKQeuaVLFeCD4e0oUjivGyuF+Ph4AgP/7hGrqknbyywW0GjA5QK9HteVj8D2HZnfg+tGSgBKvq9QjI18XYnbSegKkUUJiTbWbfyL+Yv/4PadBKxWO+n9rjIYtKBC3dpl6NSxHtWrFPP87M5uh8GDIW/epD8BAai3r6P2Xv7302N+wtAETf65vq7C7SR0hXATVVX5M+oim7Yd48/DF4g+fwONoqC9f+1XVbHaHAQFmqhQvjB1apWiVYsqhOb37YMBauJK1LvvgRrv0zpSMqAUXI+izXwbS38koSuEh7hcKpeu3ObWrXhsdicajYLRoKNEsfwEB5t8XV4Krhuvgv0PX5fxDwYIegtN0Ou+LsStJHSFyOVUVUW9Fu5fSwv3GJqjyZ+ztpDJljEhcjvXVVD9q1F7MsdhX1fgdhK6QuR29r9A8Z/2lSm47qC67vq6CreS0BUit3OeB9UPtomlRjGB84Kvq3ArCV0hcjvVgs+eQHskBVSrr4twKwldIXI9f7+X7n/n1GWFhK4QuZ1iAnzXK/jh1L/ryzkkdIXI7TSFQTH6uorUqTbQ5KyHIyR0hcjt9NUAp6+rSJ1iRtGG+roKt5LQFSK305Yg3c0ivE1X2dcVuJ2ErhC5nKIooAvzdRmp0IGhrq+LcDsJXSEEmF8CvHo+TzpoUczP+LoIt5PQFUKgmJ/D77Zm6Sqg6Mr5ugq3k9AVQqBoAsH8PKB75Gu9QglECerj6yo8QkJXCAGAEtgLfwpdjE/6ugqPkNAVQgCg6EpDUF/A7ONKTCj5JqP4axOeLJLQFUIkUwL7grYo+OAA9iQmML+IkgN3LdwjTcyFECmo9hOoNzoCiV6+sgY0hVEKrkZRfD3b9hyZ6QohUlD0YSgh0wBv9jzQgJIXJXR+jg5ckNAVQqRCMTZFyfcF3gleLSj5UEIXomiLeeF6viXLC0KINKm23ai3+oOaCHig0bliBm1xlJDZKNoi7h/fD8lMVwiRJsVQF6XgejC2wr27GhTABIH9UEKX5ZrABZnpCiHSSbVsRL37Iai3/575ZiY6dIAW9FVQ8o5B0ZV3c5X+T0JXCJFuqqqCfQ9q3GywbQfF8HcAP6w1pCHpdTjB1B4lsBuKroyXKvY/ErpCiExRXTfBdhDV/ifY/gDnqaTzzFRH0unCSiDoqybtudVXB321HL8zIT0kdIUQwovkRpoQQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQniRhK4QQnjR/wPdJoSVrY/32gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pylab\n",
    "\n",
    "G = nx.DiGraph()\n",
    "\n",
    "G.add_edges_from([('A', 'B'),('C','D'),('G','D')], weight=1)\n",
    "G.add_edges_from([('D','A'),('D','E'),('B','D'),('D','E')], weight=2)\n",
    "G.add_edges_from([('B','C'),('E','F')], weight=3)\n",
    "G.add_edges_from([('C','F')], weight=4)\n",
    "\n",
    "\n",
    "val_map = {'A': 1.0,\n",
    "                   'D': 0.5714285714285714,\n",
    "                              'H': 0.0}\n",
    "\n",
    "values = [val_map.get(node, 0.45) for node in G.nodes()]\n",
    "edge_labels=dict([((u,v,),d['weight'])\n",
    "                 for u,v,d in G.edges(data=True)])\n",
    "red_edges = [('C','D'),('D','A')]\n",
    "edge_colors = ['black' if not edge in red_edges else 'red' for edge in G.edges()]\n",
    "\n",
    "pos=nx.spring_layout(G)\n",
    "nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)\n",
    "nx.draw(G,pos, node_color = values, node_size=1500,edge_color=edge_colors,edge_cmap=plt.cm.Reds)\n",
    "pylab.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: \n",
      "Type: DiGraph\n",
      "Number of nodes: 8\n",
      "Number of edges: 9\n",
      "Average in degree:   1.1250\n",
      "Average out degree:   1.1250\n"
     ]
    }
   ],
   "source": [
    "print(nx.info(G))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
